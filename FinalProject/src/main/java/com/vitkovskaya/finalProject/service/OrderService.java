package com.vitkovskaya.finalProject.service;

import com.vitkovskaya.finalProject.entity.*;
import java.util.List;
import java.util.Map;

public interface OrderService {
    /**
     * Gets all client orders from a database by client id.
     * @param id client id
     * @return a list contains {@code Order}, not null
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    List<Order> findAllClientOrders(Long id) throws ServiceException;
    /**
     * Gets all cleaner orders from a database by cleaner id.
     * @param id cleaner id
     * @return a list contains {@code Order}, not null
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    List<Order> findAllCleanerOrders(Long id) throws ServiceException;

    /**
     * Gets all orders from a database.
     *
     * @return a list contains {@code Order}, not null
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    List<Order> findAllOrders() throws ServiceException;

    /**
     * Creates {@code Order} - from list of {@code CleaningItem}
     * Gets set of {@code Cleaner} ids from list of {@code CleaningItem} if list contains {@code CleaningItem} for
     * different {@code Cleaner} objects
     * For every single {@code Cleaner} defined by id creates separate order.
     * Sets in {@code Order}  autogenerated incoming date, executing date, comment, payment type, order sum
     * (is automatically counted on list of @code CleaningItem).
     * After the update, sets the connection between generated {@code Order} objects and {@code Client} object,
     * who made the order, connection between {@code Order} objects and {@code Cleaner} objects, who will execute order,
     * connection between {@code Cleaner} object and {@code Cleanings}, which are in the order
     * <p>
     *
     * @param user        a {@code User} object to set link to
     * @param date        a date of order executing
     * @param paymentType a order payment type
     * @param comment     a comment to the order
     * @param orderCleaningList  a list of (@code CleaningItem) in order
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     * @return a map containing pair of long (@code Cleaner) id and  (@code Order) id
     */

    Map<Long, Long> createOrder(User user, String date, String paymentType, String comment,
                                List<CleaningItem> orderCleaningList) throws ServiceException;
    /**
     * Updates {@code Order} object defined by id.
     * Updates database values - orderStatus with edited value
     *
     * @param orderId a {@code Order}  id that should be edited containing new value
     * @param orderStatus new orderStatus value
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     * @return a {@code true} if (@code Order) was updated, {@code false} otherwise
     */
    boolean changeOrderStatus(long orderId, OrderStatus orderStatus) throws ServiceException;

    /**
     * Updates {@code Order} object defined by id.
     * Updates value payment fulfilled status to {@code true}
     *
     * @param orderId a {@code Order}  id that should be edited containing new value
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     * @return a {@code true} if (@code Order) was updated, {@code false} otherwise
     */
    boolean changePaymentStatus(long orderId) throws ServiceException;
}
