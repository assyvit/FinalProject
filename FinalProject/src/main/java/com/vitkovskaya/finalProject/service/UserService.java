package com.vitkovskaya.finalProject.service;

import com.vitkovskaya.finalProject.entity.User;
import com.vitkovskaya.finalProject.entity.UserRole;

import java.io.InputStream;
import java.util.Map;
import java.util.Optional;

public interface UserService {
    /**
     * Checks if row with login and password exists in database.
     *
     * @param login    a user login
     * @param password a user password
     * @return a {@code true} if User exists, {@code false} otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean findUserByLoginAndPassword(String login, String password) throws ServiceException;
    /**
     * Check if a {@code User} exists in database  with this login .
     *
     * @param login a user login
     * @return a {@code true} if User exists, {@code false} otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean checkUserLogin(String login) throws ServiceException;
    /**
     * Updates a database with new password value,
     * sets this value to the current {@code User} object after the update.
     *
     * @param user        a {@code User} object to change
     * @param newPassword a new password value
     * @return {@code true} if {@code User} was updated, otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean changePassword(User user, String newPassword) throws ServiceException;
    /**
     * @param login    a login value
     * @param password a password value
     * @param userRole a userRole value
     * @return user id, not null
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    long registerUser(String login, String password, UserRole userRole) throws ServiceException; // FIXME: 01.03.2020
    /**
     * Creates and returns (after update a database) autogenerated (@code User) id
     * Sets generated id  as {@code Client} object id. Creates  and
     * updates database with a new row that represents this {@code Client} object.
     * If the update is successful, returns {@code true} if the table has such row, {@code false} otherwise
     *
     * @param parameters contain parameters to create (@code User) login, password, client and parameters to create
     *                   (@code Client) first name, last name, address, telephone number
     * @return an Optional {@code User} if the row was inserted, otherwise Optional.empty()
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> registerClient(Map<String, String> parameters) throws ServiceException;
    /**
     * Creates and returns (after update a database) autogenerated (@code User) id
     * Sets generated id  as {@code Cleaner} object id. Creates  and
     * updates database with a new row that represents this {@code Cleaner} object.
     * If the update is successful, returns {@code true} if the table has such row, {@code false} otherwise
     *
     * @param parameters contain parameters to create (@code User) login, password, client and parameters to create
     *                   (@code Cleaner) first name, last name, address, telephone number
     * @return an Optional {@code User} if the row was inserted, otherwise Optional.empty()
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> registerCleaner(Map<String, String> parameters) throws ServiceException;
    /**
     * Gets userRole id from a database using user login.
     *
     * @param login user login to find {@code User}
     * @return a founded and created int value of  userRole id
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    int getUserRoleId(String login) throws ServiceException;
    /**
     * Gets (after finding and creating) a {@code Optional<User>} object from a database using user login.
     *
     * @param login user login to find and create the {@code User} object
     * @return a founded and created {@code Optional<User>} object
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> findByLogin(String login) throws ServiceException;
    /**
     * Gets (after finding and creating) a {@code Optional<User>} object from a database using userId.
     *
     * @param userId a user id to find and create the {@code User} object
     * @return a founded and created {@code Optional<User>} object
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> findById(Long userId) throws ServiceException;
    /**
     * Updates a database with active status,
     * sets this status to the user by id.
     *
     * @param userId user id to be updated
     * @return {@code true} if user was updated, otherwise {@code false}
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean changeUserStatus(long userId, boolean status) throws ServiceException;
    /**
     * Updates a database with new avatar,
     * sets this value to the current {@code User} object after the update.
     *
     * @param userId    a id {@code User} object to change
     * @param image a new avatar value
     * @return {@code true} if {@code User} was updated, otherwise {@code false}
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean setUserAvatar(Long userId, InputStream image) throws ServiceException;
}
